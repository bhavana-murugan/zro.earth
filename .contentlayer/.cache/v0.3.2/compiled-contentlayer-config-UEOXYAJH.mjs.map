{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../lib/regex.js", "../../../lib/converter.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport { convert } from './lib/converter'\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  slug: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath,\n  },\n  structuredData: {\n    type: 'object',\n    resolve: (doc) => ({\n      '@context': 'https://schema.org',\n      '@type': 'BlogPosting',\n      title: doc.title,\n      slug: doc.slug,\n      date: doc.date,\n      description: doc.gist,\n      author: {\n        '@type': 'Person',\n        name: 'Rithik',\n      },\n    }),\n  },\n};\n\nexport const Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: `**/*.md`,\n  contentType: 'md',\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n    date: {\n      type: 'string',\n      required: true,\n    },\n    gist: {\n      type: 'string',\n      required: true,\n    }\n  },\n  computedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Blog],\n  md: {\n\n    remarkPlugins: [convert],\n  },\n});", "// regex patterns\n\n// for headers\nexport const h1 = /^\\s*# /gim;\nexport const h2 = /^\\s*## /gim;\nexport const h3 = /^\\s*### /gim;\nexport const emptySpace = /\\\\s+/g;\n\n// for quote\nexport const quote = /^\\s*> /gim;\n\n// list\nexport const Olist = /^(\\s*[0-9]*((\\.\\d*)?)*) /gim;\nexport const Ulist = /^\\s*- /gim;\nexport const UlistTask = /^\\s*-\\[[xX ]\\] /gim;\nexport const UlistTaskChecked = /^\\s*-\\[[xX]\\] /gim;\nexport const UlistTaskUnchecked = /^\\s*-\\[[ ]\\] /gim;\n\n// horizontal line\nexport const Hline = /---+/;\n\n// code\nexport const multiLineCode = /^```/g;\nexport const codeHighlight = /^\\* /g;\nexport const code = /`(.+?)`(?!\\*)/gi;\n\n// empty line\nexport const empty = /\\S/;\n\n// for bold, italics and strike through\nexport const bold = /\\*\\*(.+?)\\*\\*(?!\\*)/g;\nexport const tag = /==(\\S(.*?\\S)?)==/gi;\nexport const tagNotify = /==\\*(\\S(.*?\\S)?)==/gi;\nexport const tagHash = /==#(\\S(.*?\\S)?)==/gi;\nexport const colorTags = /=\\[(.*?)\\]\\((.*?)\\)=/gim\n\nexport const italics = /\\*(.+?)\\*(?!\\*)/g;\nexport const strike = /_(.+?)_(?!\\*)/g;\nexport const boldAndItalic = /\\*\\*\\*(.+?)\\*\\*\\*(?!\\*)/g;\nexport const un = /\\*\\*\\*\\*(.+?)\\*\\*\\*\\*(?!\\*)/g;\nexport const link = /\\[\\[(.*?)\\]\\]\\(((https:|http:)\\/\\/.*?)\\)/g;\n\n// for sanitization\nexport const ltr = /</gi;\n//   export const gtr = />/gi;\n\n// Table\nexport const table = /^\\|(.*?)\\|+/gim\nexport const tableDivider = /\\:[-]+/g\n\n//accordions\nexport const accordion = /^\\s*>[aA]/gim;\nexport const accord = /\\+\\+/gim;", "import {\n    un, Hline, Olist, Ulist, UlistTask,\n    UlistTaskChecked, UlistTaskUnchecked, bold,\n    boldAndItalic, code, empty, h1, h2, h3, italics, link, ltr, multiLineCode,\n    quote, strike, table, tag, tagHash, tagNotify, codeHighlight, tableDivider\n} from './regex';\n\nfunction boldAndItalics(line, regReplaced) {\n    regReplaced = line.replaceAll(un, `**$1**`);\n    regReplaced = regReplaced.replaceAll(boldAndItalic, `<em><strong>$1</strong></em>`);\n    regReplaced = regReplaced.replaceAll(bold, `<strong>$1</strong>`);\n    regReplaced = regReplaced.replaceAll(italics, `<em>$1</em>`);\n    regReplaced = regReplaced.replaceAll(strike, `<del>$1</del>`);\n    regReplaced = regReplaced.replaceAll(code, `<code>$1</code>`);\n    regReplaced = regReplaced.replaceAll(tagNotify, `<sup>$1</sup>`);\n    regReplaced = regReplaced.replaceAll(tagHash, `<span>$1</span>`);\n    regReplaced = regReplaced.replaceAll(tag, `<mark>$1</mark>`);\n    if (line.match(link)) \n        regReplaced = regReplaced.replace(link, `<a href='$2'>$1</a>`);\n    return regReplaced;\n}\n\nfunction sanitize(line) {\n    line = line.replaceAll(ltr, '&lt;');\n    return line;\n}\n\nexport async function convert(data, len) {\n    let dataHtml = '';\n    if (data) {\n        let i = 0;\n        while (i < len) {\n            let line = data[i];\n            if (empty.test(line.trim())) {\n                let regReplaced = '';\n                line = sanitize(line);\n                switch (true) {\n                    case h1.test(line):\n                        line = boldAndItalics(line, '');\n                        regReplaced = line.replace(h1, '');\n                        dataHtml += (`<a href='#${i}'><h1 id='${i}' class='table-content-h1'>${regReplaced}</h1></a>`);\n                        i++;\n                        break;\n\n                    case h2.test(line):\n                        line = boldAndItalics(line, '');\n                        regReplaced = line.replace(h2, '');\n                        dataHtml += (`<h2 class='table-content-h2'>${regReplaced}</h2>`);\n                        i++;\n                        break;\n\n\n                    case h3.test(line):\n                        line = boldAndItalics(line, '');\n                        regReplaced = line.replace(h3, '');\n                        dataHtml += (`<h3>${regReplaced}</h3>`);\n                        i++;\n                        break;\n\n                    case Hline.test(line):\n                        regReplaced = line.replace(Hline, '');\n                        dataHtml += (`<hr />`);\n                        i++;\n                        break;\n\n                    case quote.test(line):\n                        line = boldAndItalics(line, '');\n                        regReplaced = line.replace(quote, '');\n                        dataHtml += (`<blockquote>${regReplaced}</blockquote>`);\n                        i++;\n                        break;\n\n                    case multiLineCode.test(line):\n                        dataHtml += (`<code><pre>`);\n                        i++;\n                        while (i < len) {\n                            let lineJ = data[i];\n                            if (lineJ.match(multiLineCode)) break;\n                            regReplaced = lineJ;\n                            if (regReplaced === '') {\n                                dataHtml += `<br />`;\n                            } else if (regReplaced.match(codeHighlight)) {\n                                regReplaced = regReplaced.replace(codeHighlight, '');\n                                dataHtml += `<p style=\"display: block; width: 100%; background-color: var(--color-yellow)\">${regReplaced}</p>`;\n                            } else {\n                                dataHtml += `<p>${regReplaced}</p>`;\n                            }\n                            i++;\n                        }\n                        dataHtml += (`</pre></code>`);\n                        i++;\n                        break;\n\n                    case table.test(line):\n                        dataHtml += ('<table>');\n                        let isHeading = true;\n                        while (i < len) {\n                            let lineJ = data[i];\n                            lineJ = boldAndItalics(lineJ, '');\n\n                            if (!lineJ.match(table)) break;\n\n                            let cells = lineJ.substring(1, lineJ.length - 1).split('|');\n                            dataHtml += ('<tr>');\n                            for (let k = 0; k < cells.length; k++) {\n                                cells[k] = boldAndItalics(cells[k].trim(), '');\n\n                                if (cells[k].match(Hline)) continue;\n\n                                if (isHeading) {\n                                    dataHtml += (`<th>${cells[k].trim()}</th>`);\n                                } else if (cells[k].trim() === '') {\n                                    dataHtml += (`<td class='empty-row'>${cells[k].trim()}</td>`)\n                                } else if (cells[k].trim().match(tableDivider)) {\n                                    continue;\n                                } else {\n                                    dataHtml += (`<td>${cells[k].trim()}</td>`);\n                                }\n                            }\n                            dataHtml += ('</tr>');\n                            isHeading = false;\n                            i++;\n                        }\n                        dataHtml += ('</table>');\n                        break;\n\n                    case Olist.test(line):\n                        dataHtml += (`<ol>`);\n                        while (i < len) {\n                            let lineJ = data[i];\n                            lineJ = boldAndItalics(lineJ, '');\n\n                            if (!lineJ.match(Olist)) break;\n                            const padding = (lineJ.split(/[0-9](.*)/s)[0].length);\n                            regReplaced = lineJ.replace(Olist, '');\n                            dataHtml += (`<li style=\"margin-left: ${(padding)}em\">${regReplaced}</li>`);\n                            i++;\n                        }\n                        dataHtml += (`</ol>`);\n                        break;\n\n\n                    case UlistTask.test(line):\n                        dataHtml += (`<dl>`);\n                        while (i < len) {\n                            let lineJ = data[i];\n                            lineJ = boldAndItalics(lineJ, '');\n\n                            if (!lineJ.match(UlistTask)) break;\n\n                            regReplaced = lineJ.replace(UlistTask, '');\n                            const padding = (lineJ.split('-')[0].length) / 2;\n\n                            if (lineJ.match(UlistTaskChecked))\n                                dataHtml += (`<dd style='padding-left: ${padding}em'>\u2705 ${regReplaced}</dd>`);\n                            else if (lineJ.match(UlistTaskUnchecked))\n                                dataHtml += (`<dd style='padding-left: ${padding}em'>\u2B55 ${regReplaced}</dd>`);\n                            i++;\n                        }\n                        dataHtml += (`</dl>`);\n                        break;\n\n                    case Ulist.test(line):\n                        dataHtml += (`<ul>`);\n\n                        while (i < len) {\n                            let lineJ = data[i];\n                            lineJ = boldAndItalics(lineJ, '');\n                            if (!lineJ.match(Ulist)) break;\n\n                            const padding = (lineJ.split('-')[0].length);\n                            regReplaced = lineJ.replace(Ulist, '');\n                            dataHtml += (`<li style=\"margin-left: ${1.3 + (padding)}em\">${regReplaced}</li>`);\n                            i++;\n                        }\n                        dataHtml += (`</ul>`);\n                        break;\n\n                    default:\n                        line = boldAndItalics(line, '');\n                        dataHtml += (`<p>${line}</p>`);\n                        i++;\n                        break;\n                }\n\n            } else {\n                dataHtml += (\"<br />\");\n                i++;\n            }\n        }\n        return dataHtml;\n    }\n}"],
  "mappings": "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",
  "names": []
}
